package com.redsamurai.model.views;

import com.redsamurai.model.views.common.EmployeesView;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 30 13:50:54 EET 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeesViewImpl extends ViewObjectImpl implements EmployeesView {
    private static final ADFLogger _logger = ADFLogger.createADFLogger(EmployeesViewImpl.class);
    private Key currentRowKey;
    private int currentRowIndexInRange;
    
    /**
     * This is the default constructor (do not remove).
     */
    public EmployeesViewImpl() {
    }
    
    public void beforeRollback(TransactionEvent TransactionEvent) {
        if (this.isExecuted()) {
            ViewRowImpl currentRow = (ViewRowImpl)this.getCurrentRow();
            if (currentRow != null) {
                byte newRowState = currentRow.getNewRowState();
                if (newRowState != Row.STATUS_INITIALIZED && newRowState != Row.STATUS_NEW) {
                    currentRowKey = currentRow.getKey();
                    int rangeIndexOfCurrentRow = this.getRangeIndexOf(currentRow);
                    currentRowIndexInRange = rangeIndexOfCurrentRow;
                }
            }
        }
        super.beforeRollback(TransactionEvent);
    }
        
    public void afterRollback(TransactionEvent TransactionEvent) {
        super.afterRollback(TransactionEvent);
        if (currentRowKey != null) {
            _logger.fine("STARTING CURRENT ROW RESET");
            
            this.executeQuery();
            Key k = new Key(currentRowKey.getAttributeValues());
            Row[] found = this.findByKey(k, 1);
            if (found != null && found.length == 1) {
                Row r = this.getRow(k);
                this.setCurrentRow(r);
                if (currentRowIndexInRange >= 0) {
                    this.scrollRangeTo(r, currentRowIndexInRange);
                }
            }
            
            _logger.fine("FINISHING CURRENT ROW RESET");
        }
        currentRowKey = null;
    }

    /**
     * Returns the variable value for countryIdVar.
     * @return variable value for countryIdVar
     */
    public String getcountryIdVar() {
        return (String) ensureVariableManager().getVariableValue("countryIdVar");
    }

    /**
     * Sets <code>value</code> for variable countryIdVar.
     * @param value value to bind as countryIdVar
     */
    public void setcountryIdVar(String value) {
        ensureVariableManager().setVariableValue("countryIdVar", value);
    }
    
    public void filterByCountry(String countryId) {
        this.setcountryIdVar(countryId);
        ViewCriteria vc = this.getViewCriteria("EmployeesViewCriteria");
        this.applyViewCriteria(vc);
        this.executeQuery();
    }
}

